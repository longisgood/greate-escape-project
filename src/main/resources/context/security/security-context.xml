<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-5.7.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

	<bean id="gsMemberDetail" class="net.koreate.greatescape.security.GEMemberDetailsService" />
	<!-- <bean id="no" class="org.springframework.security.crypto.password.NoOpPasswordEncoder" /> -->
	<bean id="bCryptPasswordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder" />
	<bean id="loginSuccessHandler" class="net.koreate.greatescape.security.LoginSuccessHandler" />

	<!-- <bean id="encFirewall" class="org.springframework.security.web.firewall.StrictHttpFirewall" >
		<property name="allowUrlEncodedSlash" value="true" />
	</bean> -->

	<!-- 
		hasRole
		hasAnyRole
		anonymous
		authenticated
		permitAll
		denyAll
	 -->
	 <security:http pattern="/resources/**" security="none" />
	 <security:http pattern="/attach/**" security="none" />
	 <security:http pattern="/products/htmlImage" security="none" />
	 
	<security:http auto-config="true">
		<security:form-login 
			login-page="/member/login"
			login-processing-url="/member/login"
			username-parameter="member_id"
			password-parameter="member_pw"
			authentication-success-handler-ref="loginSuccessHandler"
		/>
		<security:logout
			logout-url="/member/logOut"
			logout-success-url="/"
			delete-cookies="userCookie"
		/>
		<security:access-denied-handler error-page="/error/403" />
		<security:remember-me 
			remember-me-cookie="userCookie"
			token-validity-seconds="604800" 
		/>
		<security:session-management>
			<security:concurrency-control 
				max-sessions="1" 
				error-if-maximum-exceeded="false"
				expired-url="/logoff" 
			/>
		</security:session-management>
		
		<security:intercept-url
			pattern="/board/qnaWrite"
			access="authenticated"
		/>
		<security:intercept-url
			pattern="/board/*Write"
			access="hasAnyRole('ROLE_MASTER','ROLE_ADMIN')"
		/>
		<security:intercept-url
			pattern="/board/faqDelete"
			access="hasAnyRole('ROLE_MASTER','ROLE_ADMIN')"
		/>
		<security:intercept-url
			pattern="/board/comment"
			access="hasAnyRole('ROLE_MASTER','ROLE_ADMIN')"
		/>
		<security:intercept-url
			pattern="/board/qnaDetail"
			access="authenticated"
		/>
		<security:intercept-url
			pattern="/board/myQNA"
			access="authenticated"
		/>
		
		<security:intercept-url
			pattern="/member/myPage"
			access="authenticated"
		/>
		<security:intercept-url
			pattern="/member/reservDetail"
			access="authenticated"
		/>
		<security:intercept-url
			pattern="/member/deleteProduct"
			access="authenticated"
		/>
		<security:intercept-url
			pattern="/member/edit_check"
			access="authenticated"
		/>
		<security:intercept-url
			pattern="/member/insertPass"
			access="authenticated"
		/>
		<security:intercept-url
			pattern="/member/modify"
			access="authenticated"
		/>
		<security:intercept-url
			pattern="/member/withdraw"
			access="authenticated"
		/>
		<security:intercept-url
			pattern="/member/delete"
			access="authenticated"
		/>
		<security:intercept-url
			pattern="/member/adminPage"
			access="hasAnyRole('ROLE_MASTER','ROLE_ADMIN')"
		/>
		<security:intercept-url
			pattern="/member/detailInfo"
			access="hasAnyRole('ROLE_MASTER','ROLE_ADMIN')"
		/>
		<security:intercept-url
			pattern="/member/memberReserv"
			access="hasAnyRole('ROLE_MASTER','ROLE_ADMIN')"
		/>
		<security:intercept-url
			pattern="/member/createAdmin"
			access="hasRole('ROLE_MASTER')"
		/>
		<security:intercept-url
			pattern="/member/newAdmin"
			access="hasRole('ROLE_MASTER')"
		/>
		<security:intercept-url
			pattern="/member/sales"
			access="hasAnyRole('ROLE_MASTER','ROLE_ADMIN')"
		/>
		<security:intercept-url
			pattern="/member/control"
			access="hasAnyRole('ROLE_MASTER','ROLE_ADMIN')"
		/>
		<security:intercept-url
			pattern="/member/deleteP"
			access="hasAnyRole('ROLE_MASTER','ROLE_ADMIN')"
		/>
		<security:intercept-url
			pattern="/member/deadline"
			access="hasAnyRole('ROLE_MASTER','ROLE_ADMIN')"
		/>

		
		<security:intercept-url
			pattern="/products/{id}/delete"
			access="hasAnyRole('ROLE_MASTER','ROLE_ADMIN')"
		/>
		<security:intercept-url
			pattern="/products/{id}/update"
			access="hasAnyRole('ROLE_MASTER','ROLE_ADMIN')"
		/>
		<security:intercept-url
			pattern="/products/new"
			access="hasAnyRole('ROLE_MASTER','ROLE_ADMIN')"
		/>
		<security:intercept-url
			pattern="/products"
			method="POST"
			access="hasAnyRole('ROLE_MASTER','ROLE_ADMIN')"
		/>
		<security:intercept-url
			pattern="/**"
			access="permitAll"
		/>
	</security:http>
	
	<security:authentication-manager>
		<security:authentication-provider user-service-ref="gsMemberDetail">
			<security:password-encoder ref="bCryptPasswordEncoder"/>
		</security:authentication-provider>
	</security:authentication-manager>
</beans>
